// Final, simplified Prisma schema with profile picture upload support and cleaned Resume

// =================== GENERATORS ===================
generator client {
  provider = "prisma-client-js"
}

// =================== DATASOURCE ===================
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// =================== ENUMS ===================
enum UserRole {
  JOB_SEEKER
  COMPANY
  ADMIN
}

enum JobStatus {
  URGENTLY_HIRING
  HIRING
  CLOSED
  CLOSED_BY_ADMIN
}

enum ApplicationStatus {
  APPLIED
  REVIEWING
  REJECTED
  SUCCESS
}

enum WorkType {
  ONSITE
  REMOTE
  HYBRID
}

// =================== AUTH MODELS ===================
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]

  role       UserRole @default(JOB_SEEKER)
  isApproved Boolean  @default(true)

  jobSeekerProfile JobSeekerProfile?
  companyProfile   CompanyProfile?
  adminProfile     AdminProfile?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([role])
  @@index([email])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@index([userId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// =================== PROFILE MODELS ===================

model JobSeekerProfile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  firstName      String?
  lastName       String?
  phone          String?
  location       String?
  bio            String?
  linkedinUrl    String?
  githubUrl      String?
  portfolioUrl   String?
  profilePicture String?

  resumes      Resume[]
  applications JobApplication[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([location])
  @@index([userId])
}

model CompanyProfile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  name        String
  description String?
  website     String?
  industry    String?
  size        String?
  address     String?
  logoUrl     String?

  jobPostings JobPosting[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
  @@index([address])
  @@index([userId])
}

model AdminProfile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  firstName      String?
  lastName       String?
  profilePicture String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

// =================== RESUME ===================

model Resume {
  id          String           @id @default(cuid())
  jobSeekerId String
  jobSeeker   JobSeekerProfile @relation(fields: [jobSeekerId], references: [id], onDelete: Cascade)

  fileName String
  s3Url    String
  fileSize Int

  jobApplications JobApplication[] @relation("ResumeToJobApplication")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([jobSeekerId])
}

// =================== JOB POSTING ===================

model JobPosting {
  id        String         @id @default(cuid())
  companyId String
  company   CompanyProfile @relation(fields: [companyId], references: [id], onDelete: Cascade)

  title       String
  description String
  location    String
  workType    WorkType
  salaryMin   Int?
  salaryMax   Int?
  status      JobStatus @default(HIRING)

  applications JobApplication[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
  @@index([companyId])
  @@index([title, description])
  @@index([location])
  @@index([createdAt])
}

// =================== JOB APPLICATION ===================

model JobApplication {
  id    String     @id @default(cuid())
  jobId String
  job   JobPosting @relation(fields: [jobId], references: [id], onDelete: Cascade)

  jobSeekerId String
  jobSeeker   JobSeekerProfile @relation(fields: [jobSeekerId], references: [id], onDelete: Cascade)

  resumeId String
  resume   Resume @relation("ResumeToJobApplication", fields: [resumeId], references: [id], onDelete: Cascade)

  coverLetter String?
  status      ApplicationStatus @default(APPLIED)

  appliedAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([jobId, jobSeekerId])
  @@index([jobSeekerId])
  @@index([jobId])
  @@index([resumeId])
  @@index([status])
  @@index([appliedAt])
}

// =================== EMBEDDING CHUNKS ===================

model ResumeChunk {
  id            String   @id
  jobSeekerId   String
  resumeId      String
  chunkIndex    Int
  totalChunks   Int
  content       String
  embedding     Float[]
  appliedJobIds String[]
  source        String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([jobSeekerId])
  @@index([resumeId])
}

model JobPostingChunk {
  id          String  @id
  companyId   String
  jobId       String
  chunkIndex  Int
  totalChunks Int
  content     String
  embedding   Float[]
  active      Boolean @default(true)
  source      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([companyId])
  @@index([jobId])
  @@index([active])
}
