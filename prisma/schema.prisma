// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
  // I prefer to not generate the client in a separate folder, so I'm commenting this out
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// =================== ENUMS ===================

enum UserRole {
  JOB_SEEKER
  RECRUITER
  ADMIN
}

enum JobStatus {
  URGENTLY_HIRING
  HIRING
  CLOSED
  CLOSED_BY_ADMIN
}

enum ApplicationStatus {
  APPLIED
  REVIEWED
  INTERVIEWING
  OFFERED
  REJECTED
  WITHDRAWN
}

// =================== AUTH.JS MODELS ===================

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]

  role       UserRole @default(JOB_SEEKER)
  isApproved Boolean  @default(true)

  jobSeekerProfile JobSeekerProfile?
  recruiterProfile RecruiterProfile?
  adminProfile     AdminProfile?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([role])
  @@index([email])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@index([userId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// =================== PROFILE MODELS ===================

model JobSeekerProfile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  firstName    String?
  lastName     String?
  phone        String?
  location     String?
  bio          String?
  linkedinUrl  String?
  githubUrl    String?
  portfolioUrl String?

  resumes        Resume[]
  jobPreferences JobPreference?
  applications   JobApplication[]
  chatHistories  ChatHistory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([location])
  @@index([userId])
}

model RecruiterProfile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  firstName String?
  lastName  String?
  phone     String?
  title     String?

  companyName        String
  companyDescription String?
  companyWebsite     String?
  companyIndustry    String?
  companySize        String?
  companyAddress     String?
  companyLogoUrl     String?

  jobPostings   JobPosting[]
  chatHistories ChatHistory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([companyName])
  @@index([companyAddress])
  @@index([userId])
}

model AdminProfile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  moderatedJobs JobPosting[] @relation("ModeratedBy")

  firstName String?
  lastName  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

// =================== RESUME ===================

model Resume {
  id     String           @id @default(cuid())
  userId String
  user   JobSeekerProfile @relation(fields: [userId], references: [id], onDelete: Cascade)

  fileName      String
  s3Key         String  @unique
  s3Url         String
  fileSize      Int
  extractedText String?
  weaviateId    String? @unique

  jobApplications JobApplication[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([extractedText])
  @@index([weaviateId])
}

// =================== JOB APPLICATION PREFERENCE ===================

model JobPreference {
  id     String           @id @default(cuid())
  userId String           @unique
  user   JobSeekerProfile @relation(fields: [userId], references: [id], onDelete: Cascade)

  desiredRoles    String[]
  locations       String[]
  remoteWork      Boolean  @default(false)
  hybridWork      Boolean  @default(false)
  salaryMin       Int?
  salaryMax       Int?
  experienceLevel String?
  industries      String[]
  skills          String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([locations])
  @@index([skills])
}

// =================== JOB POSTING ===================

model JobPosting {
  id          String           @id @default(cuid())
  recruiterId String
  recruiter   RecruiterProfile @relation(fields: [recruiterId], references: [id], onDelete: Cascade)

  title            String
  description      String
  requirements     String[]
  responsibilities String[]
  location         String?
  remoteWork       Boolean   @default(false)
  hybridWork       Boolean   @default(false)
  salaryMin        Int?
  salaryMax        Int?
  experienceLevel  String?
  employmentType   String?
  benefits         String[]
  status           JobStatus @default(HIRING)

  moderatedBy String?
  moderator   AdminProfile? @relation("ModeratedBy", fields: [moderatedBy], references: [id])
  moderatedAt DateTime?

  weaviateId   String?          @unique
  applications JobApplication[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
  @@index([recruiterId])
  @@index([title, description])
  @@index([location])
  @@index([weaviateId])
  @@index([createdAt])
}

// =================== JOB APPLICATION ===================

model JobApplication {
  id    String     @id @default(cuid())
  jobId String
  job   JobPosting @relation(fields: [jobId], references: [id], onDelete: Cascade)

  applicantId String
  applicant   JobSeekerProfile @relation(fields: [applicantId], references: [id], onDelete: Cascade)

  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  coverLetter String?
  status      ApplicationStatus @default(APPLIED)

  appliedAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([jobId, applicantId])
  @@index([applicantId])
  @@index([jobId])
  @@index([resumeId])
  @@index([status])
  @@index([appliedAt])
}

// =================== CHAT HISTORY ===================

model ChatHistory {
  id String @id @default(cuid())

  jobSeekerId String?
  recruiterId String?

  jobSeeker JobSeekerProfile? @relation(fields: [jobSeekerId], references: [id], onDelete: Cascade)
  recruiter RecruiterProfile? @relation(fields: [recruiterId], references: [id], onDelete: Cascade)

  messages Json[]
  context  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([jobSeekerId])
  @@index([recruiterId])
  @@index([createdAt])
}

// =================== EMBEDDING METADATA ===================

model EmbeddingMetadata {
  id         String @id @default(cuid())
  weaviateId String @unique

  sourceType String
  sourceId   String

  originalText String
  chunkIndex   Int?
  totalChunks  Int?

  model      String
  dimensions Int

  processedAt DateTime @default(now())
  version     String   @default("1.0")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sourceType, sourceId])
  @@index([weaviateId])
  @@index([processedAt])
}
